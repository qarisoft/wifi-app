<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="d2.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2857"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="charges" custom_title="0" dock_id="2" table="4,7:maincharges"/><table title="charges" custom_title="0" dock_id="1" table="4,7:maincharges"/><table title="order_items" custom_title="0" dock_id="16" table="4,11:mainorder_items"/><dock_state state="000000ff00000000fd0000000100000002000005a400000407fc0100000001fc00000000000005a40000012300fffffffa000000020100000003fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011e00fffffffb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000011e00fffffffb000000180064006f0063006b00420072006f007700730065003100360100000000ffffffff0000012300ffffff000005a40000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="charges" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="35"/><column index="2" value="53"/><column index="3" value="56"/><column index="4" value="71"/><column index="5" value="44"/><column index="6" value="53"/><column index="7" value="71"/><column index="8" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="35"/><column index="2" value="55"/><column index="3" value="43"/><column index="4" value="43"/><column index="5" value="159"/><column index="6" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="order_items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="35"/><column index="2" value="53"/><column index="3" value="56"/><column index="4" value="87"/><column index="5" value="47"/><column index="6" value="69"/><column index="7" value="58"/><column index="8" value="159"/><column index="9" value="159"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="40"/><column index="2" value="35"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 4">-- CREATE TRIGGER orderitems_createdsss
-- AFTER INSERT on order_items
-- BEGIN
-- 	UPDATE orders 
-- -- 	SET cost = (SELECT price * new.quantity as cost from products WHERE products.id=new.product_id ) WHERE id=new.id;
-- 	SET total_price = (SELECT sum(oi.cost)  FROM order_items oi WHERE oi.order_id=new.order_id GROUP BY oi.order_id) WHERE id=new.order_id;
-- END;


-- SELECT sum(oi.cost)  FROM order_items oi WHERE oi.order_id=1 GROUP BY oi.order_id;
	



-- UPDATE orders SET updated_at = datetime('now') WHERE id=old.id;

-- CREATE TRIGGER orders_delivered3
-- 	  AFTER UPDATE on orders
-- 	  WHEN new.is_delivered=1 AND old.is_delivered=0
-- 	  BEGIN
-- 		INSERT INTO charges (year_id,out_qnt,product_id,product_price,cost)
-- 			SELECT 
-- 				(SELECT id FROM years WHERE is_current=1) as year_id,
-- 				quantity as out_qnt,
-- 				product_id,
-- 				price as product_price,
-- 				price * quantity as costt
-- 				FROM order_items 
-- 					JOIN products p on p.id=product_id 
-- 				WHERE orders.id =new.order_id;
-- 	  END;

-- SELECT 
-- 	(SELECT id FROM years WHERE is_current=1) as year_id,
-- 	quantity as out_qnt,
-- 	product_id,
-- 	price as product_price,
-- 	price * quantity as costt
-- 	FROM order_items 
-- 		JOIN products p on p.id=product_id 
-- 	WHERE order_id =1;
-- 
-- 
-- 
-- 









	
-- 	JOIN orders where oi.order_id = o.id;</sql><sql name="SQL 5">DROP TABLE if EXISTS products;
DROP TABLE if EXISTS order_items;
DROP TABLE if EXISTS orders;
DROP TABLE if EXISTS customers;


DROP TABLE if EXISTS charges;
DROP TABLE if EXISTS years;

DROP VIEW if EXISTS order_items_cost;


CREATE TABLE years (
	id	INTEGER NOT NULL UNIQUE,
	name	TEXT NOT NULL UNIQUE,
	is_current	INTEGER NOT NULL DEFAULT 0,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE products(
	id INTEGER NOT NULL,
	name TEXT NOT NULL,
	price REAL default 0,
	active INTEGER default 0,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE customers(
	  id INTEGER  NOT NULL,
	  name TEXT,
	  active INTEGER default 0,
	  phone TEXT,
	  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	  updated_at TIMESTAMP,
	  PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE orders (
	id	INTEGER NOT NULL,
	year_id		INTEGER NOT NULL,
	total_price	INTEGER DEFAULT 0,
	customer_id	INTEGER DEFAULT 0,
	is_posted	INTEGER DEFAULT 0,
	is_delivered	INTEGER DEFAULT 0,
	created_at	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at	TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(customer_id) REFERENCES customers(id)
);
CREATE TABLE order_items (
	id				INTEGER NOT NULL,
	year_id			INTEGER NOT NULL,
	quantity		INTEGER DEFAULT 1,
	product_price	REAL DEFAULT 0,
	cost 			REAL DEFAULT 0,
	product_id		INTEGER NOT NULL,
	order_id		INTEGER NOT NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at		TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(year_id)  REFERENCES years(id),
	FOREIGN KEY(order_id) REFERENCES orders(id)
);

CREATE TABLE charges (
	id				INTEGER NOT NULL,
	year_id			INTEGER NOT NULL,
	product_id		INTEGER NOT NULL,
	product_price	REAL NOT NULL DEFAULT 0,
	cost			REAL NOT NULL DEFAULT 0,
	in_qnt			INTEGER NOT NULL DEFAULT 0,
	out_qnt			INTEGER NOT NULL DEFAULT 0,
	created_at		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at		TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(year_id) REFERENCES years(id)
	FOREIGN KEY(product_id) REFERENCES products(id)
);



CREATE VIEW order_items_cost
	AS 
	SELECT 
		oi.id as order_item_id,
		oi.product_id,
		oi.product_price,
		oi.quantity,
		p.price * oi.quantity as cost
	FROM 
	order_items oi
	JOIN products p WHERE p.id=oi.product_id;






	  
-- CREATE TRIGGER upate_order_item_product_price
-- 	AFTER INSERT on order_items
-- 	WHEN (SELECT is_delivered FROM orders WHERE orders.id=new.order_id)=0
-- 	BEGIN
-- 		UPDATE order_items 
-- 		SET product_price = (SELECT price FROM products WHERE products.id=new.product_id),
-- 			cost = (SELECT price * new.quantity as cost from products WHERE products.id=new.product_id ) 
-- 		WHERE id=new.id;
-- END;



CREATE TRIGGER upate_order_item_cost_when_item_updated
	AFTER UPDATE on order_items
	BEGIN
		UPDATE order_items 
		SET cost = (SELECT price * new.quantity as cost from products WHERE products.id=new.product_id ),
			updated_at = datetime('now')
		WHERE id=new.id;
END;

CREATE TRIGGER update_order_total_price_when_order_item_updated
	AFTER UPDATE on order_items
	BEGIN
		UPDATE orders 
		SET total_price = (SELECT sum(oi.cost)  FROM order_items oi WHERE oi.order_id=new.order_id GROUP BY oi.order_id) WHERE id=new.order_id;
END;

-- CREATE TRIGGER update_order_total_price_when_order_item_inserted
-- 	AFTER INSERT on order_items
-- 	BEGIN
-- 		UPDATE orders 
-- 		SET total_price = (SELECT sum(oi.cost)  FROM order_items oi WHERE oi.order_id=new.order_id GROUP BY oi.order_id) WHERE id=new.order_id;
-- END;




CREATE TRIGGER orders_delivered
	  AFTER UPDATE on orders
	  WHEN new.is_delivered=1 AND old.is_delivered=0
	  BEGIN
		INSERT INTO charges (year_id,out_qnt,product_id,product_price,cost)
			SELECT 
				(SELECT id FROM years WHERE is_current=1) as year_id,
				quantity as out_qnt,
				product_id,
				price as product_price,
				price * quantity as costt
				FROM order_items 
					JOIN products p on p.id=product_id 
				WHERE id =new.order_id;
	  END;
	  
	  

CREATE TRIGGER products_updated 
  AFTER UPDATE on products
  BEGIN
	UPDATE products
	SET updated_at = datetime('now')
	  WHERE id=old.id;
  END;
  
CREATE TRIGGER charges_updated 
  AFTER UPDATE on charges
  BEGIN
	UPDATE charges
	SET updated_at = datetime('now') 
	  WHERE id=old.id;
  END;

CREATE TRIGGER customers_updated 
	  AFTER UPDATE on customers
	  BEGIN
		UPDATE customers
		SET updated_at = datetime('now') 
		  WHERE id=old.id;
 END;

CREATE TRIGGER orders_updated 
	  AFTER UPDATE on orders
	  BEGIN
		UPDATE orders
		SET updated_at = datetime('now') 
		  WHERE id=old.id;
	  END;

	  
INSERT INTO years (name,is_current)
	VALUES
		('2024',1);
		
INSERT INTO products (name,price,active)
	VALUES
	('product1',100,1),
	('product2',200,1),
	('product3',300,1);
	
	
INSERT INTO customers (name,active)
	VALUES
		('salah',1),
		('salah2',1);

		
INSERT INTO orders (year_id,customer_id)
	VALUES (1,1),
			(1,2);
		
		
		
INSERT INTO order_items (year_id,quantity,product_id,order_id)
	VALUES 
	(1,3,1,1),
	(1,2,2,1),
	(1,6,1,1),
	(1,8,1,1),
	(1,4,2,1),
	(1,4,1,2),
	(1,3,2,2),
	(1,5,1,2),
	(1,7,1,2),
	(1,8,2,2);


</sql><sql name="SQL 6">DROP TABLE if EXISTS products;
DROP TABLE if EXISTS order_items;
DROP TABLE if EXISTS orders;
DROP TABLE if EXISTS customers;


DROP TABLE if EXISTS charges;
DROP TABLE if EXISTS years;

DROP VIEW if EXISTS order_items_cost;


CREATE TABLE years (
	id	INTEGER NOT NULL UNIQUE,
	name	TEXT NOT NULL UNIQUE,
	is_current	INTEGER NOT NULL DEFAULT 0,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE products(
	id INTEGER NOT NULL,
	name TEXT NOT NULL,
	price REAL default 0,
	active INTEGER default 0,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE customers(
	  id INTEGER  NOT NULL,
	  name TEXT,
	  active INTEGER default 0,
	  phone TEXT,
	  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	  updated_at TIMESTAMP,
	  PRIMARY KEY(id AUTOINCREMENT)
);
CREATE TABLE orders (
	id	INTEGER NOT NULL,
	year_id		INTEGER NOT NULL,
	total_price	INTEGER DEFAULT 0,
	customer_id	INTEGER DEFAULT 0,
	is_posted	INTEGER DEFAULT 0,
	is_delivered	INTEGER DEFAULT 0,
	created_at	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at	TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(customer_id) REFERENCES customers(id)
);
CREATE TABLE order_items (
	id				INTEGER NOT NULL,
	year_id			INTEGER NOT NULL,
	quantity		INTEGER DEFAULT 1,
	product_price	REAL DEFAULT 0,
	cost 			REAL DEFAULT 0,
	product_id		INTEGER NOT NULL,
	order_id		INTEGER NOT NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at		TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(year_id)  REFERENCES years(id),
	FOREIGN KEY(order_id) REFERENCES orders(id)
);

CREATE TABLE charges (
	id				INTEGER NOT NULL,
	year_id			INTEGER NOT NULL,
	product_id		INTEGER NOT NULL,
	product_price	REAL NOT NULL DEFAULT 0,
	cost			REAL NOT NULL DEFAULT 0,
	in_qnt			INTEGER NOT NULL DEFAULT 0,
	out_qnt			INTEGER NOT NULL DEFAULT 0,
	created_at		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at		TIMESTAMP,
	PRIMARY KEY(id AUTOINCREMENT),
	FOREIGN KEY(year_id) REFERENCES years(id)
	FOREIGN KEY(product_id) REFERENCES products(id)
);



CREATE VIEW order_items_cost
	AS 
	SELECT 
		oi.id as order_item_id,
		oi.product_id,
		oi.product_price,
		oi.quantity,
		p.price * oi.quantity as cost
	FROM 
	order_items oi
	JOIN products p WHERE p.id=oi.product_id;

	
	
	
	
CREATE TRIGGER orders_delivered
	  AFTER UPDATE on orders
	  WHEN new.is_delivered=1 AND old.is_delivered=0
	  BEGIN
		INSERT INTO charges (year_id,out_qnt,product_id,product_price,cost)
			SELECT 
				(SELECT id FROM years WHERE is_current=1) as year_id,
				quantity as out_qnt,
				product_id,
				price as product_price,
				price * quantity as costt
				FROM order_items 
					JOIN products p on p.id=product_id 
				WHERE id =new.order_id;
	  END;
	  
	  
CREATE TRIGGER upate_order_item_product_price
	AFTER INSERT on order_items
	WHEN (SELECT is_delivered FROM orders WHERE orders.id=new.order_id)=0
	BEGIN
		UPDATE order_items 
		SET product_price = (SELECT price FROM products WHERE products.id=new.product_id),
			cost = (SELECT price * new.quantity as cost from products WHERE products.id=new.product_id ),
			updated_at = datetime('now')
		WHERE id=new.id;
END;





  
CREATE TRIGGER products_updated 
  AFTER UPDATE on products
  BEGIN
	UPDATE products
	SET updated_at = datetime('now')
	  WHERE id=old.id;
  END;


CREATE TRIGGER customers_updated 
	  AFTER UPDATE on customers
	  BEGIN
		UPDATE customers
		SET updated_at = datetime('now') 
		  WHERE id=old.id;
 END;

CREATE TRIGGER orders_updated 
	  AFTER UPDATE on orders
	  BEGIN
		UPDATE orders
		SET updated_at = datetime('now') 
		  WHERE id=old.id;
	  END;

	
	
	
	
	
	
	
	

INSERT INTO years (name,is_current)
	VALUES
		('2024',1);
		
INSERT INTO products (name,price,active)
	VALUES
	('product1',100,1),
	('product2',200,1),
	('product3',300,1);
	
	
INSERT INTO customers (name,active)
	VALUES
		('salah',1),
		('salah2',1);

		
INSERT INTO orders (year_id,customer_id)
	VALUES (1,1),
			(1,2);
		
		
		
INSERT INTO order_items (year_id,quantity,product_id,order_id)
	VALUES 
	(1,3,1,1),
	(1,2,2,1),
	(1,6,1,1),
	(1,8,1,1),
	(1,4,2,1),
	(1,4,1,2),
	(1,3,2,2),
	(1,5,1,2),
	(1,7,1,2),
	(1,8,2,2);</sql><current_tab id="2"/></tab_sql></sqlb_project>
